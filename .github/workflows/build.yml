name: Build

on:
  workflow_call:
    outputs:
      dev-branch:
        value: ${{ jobs.build.outputs.dev-branch }}
      pre-release:
        value: ${{ jobs.build.outputs.pre-release }}
      release-branch:
          value: ${{ jobs.build.outputs.release-branch }}
      version: 
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      # convert PublicRelease to a boolean by comparing the string value to 'true'
      dev-branch: ${{ steps.relInfo.outputs.onDevelopBranch == 'true'}}
      pre-release: ${{ steps.relInfo.outputs.preRelease == 'true'}}
      release-branch: ${{ steps.relInfo.outputs.onReleaseBranch == 'true'}}
      version: ${{ steps.relInfo.outputs.extensionVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 0 # fetch-depth 0 needed for NBGV
      - name: Nerdbank.GitVersioning
        uses: dotnet/nbgv@v0.4.2
        id: nbgv
      - name: Install Dependencies
        run: npm ci
      - name: Calculate Release Info
        id: relInfo
        uses: actions/github-script@v7.0.1
        env:
          SEMANTIC_VERSION_1: ${{ steps.nbgv.outputs.SemVer1 }}
          SIMPLE_VERSION: ${{ steps.nbgv.outputs.SimpleVersion }}
        with:
          script: |
            const { SEMANTIC_VERSION_1, SIMPLE_VERSION } = process.env;

            const onDevelopBranch = context.ref === 'refs/heads/develop';
            const onReleaseBranch = context.ref.startsWith('refs/heads/release/');
            const onPublicationBranch = onDevelopBranch || onReleaseBranch;

            // dev branch builds are marked as pre-release, 
            const preRelease = onDevelopBranch ? true : false;
            // builds from publication branches (dev + release) use simple version, all other branches use semantic version 1
            const extensionVersion = onPublicationBranch ? SIMPLE_VERSION : SEMANTIC_VERSION_1;

            core.setOutput('preRelease', preRelease);
            core.setOutput('extensionVersion', extensionVersion);
            core.setOutput('onDevelopBranch', onDevelopBranch);
            core.setOutput('onReleaseBranch', onReleaseBranch);

      - name: Dump Release Info
        env:
          PRE_RELEASE: ${{ steps.relInfo.outputs.preRelease }}
          EXT_VERSION: ${{ steps.relInfo.outputs.extensionVersion }}
        run: |
          echo "version      $EXT_VERSION"
          echo "  prerelease $PRE_RELEASE"
      - name: Pack Extension
        if: ${{ steps.relInfo.outputs.preRelease != 'true' }}
        run: npx vsce pack ${{ steps.relInfo.outputs.extensionVersion }} --no-git-tag-version 
      - name: Pack Pre-Release Extension
        if: ${{ steps.relInfo.outputs.preRelease == 'true' }} 
        run: npx vsce pack ${{ steps.relInfo.outputs.extensionVersion }} --no-git-tag-version --pre-release  
      - name: Upload Extension Artifact
        uses: actions/upload-artifact@v4.3.0
        with: 
          name: Extension
          path: dbos-ttdbg*.vsix
